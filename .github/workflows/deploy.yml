name: Build Backend with Remote Frontend and Deploy (Build on Server)

on:
  push:
    branches:
      - main
  workflow_dispatch: # for manual triggers
  repository_dispatch:
    types: [frontend-update]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Backend Repository
      - name: Checkout Backend Repository
        uses: actions/checkout@v4

      # 2. Checkout Frontend Repository
      - name: Checkout Frontend Repository
        uses: actions/checkout@v4
        with:
          repository: Capstone-Memoria/Memoria-Front
          path: frontend
          ref: main

      # 3. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # 4. Install pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: "8.x"
          run_install: false

      # 5. Cache pnpm Store
      - name: Cache pnpm Store
        uses: actions/cache@v4
        id: pnpm-cache
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 6. Install & Build Frontend using pnpm
      - name: Build Frontend
        working-directory: ./frontend
        run: |
          pnpm install
          pnpm run build

      # 7. Copy frontend build to Spring Boot static resources
      - name: Copy frontend build to Spring Boot static
        run: |
          echo "Copying frontend build from $(pwd)/frontend/dist to $(pwd)/src/main/resources/static"
          rm -rf ./src/main/resources/static/*
          mkdir -p ./src/main/resources/static
          cp -r ./frontend/dist/* ./src/main/resources/static/

      # 8. Setup Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      # 9. Cache Gradle packages
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 10. Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 11. Build Backend with Gradle (Create JAR)
      - name: Build Backend with Gradle
        run: ./gradlew bootJar

      # 12. Create SSH Key
      - name: Create SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private-key.pem
          chmod 600 private-key.pem
          echo "SSH key created and permissions set"

      # 13. Add Known Host
      - name: Add Known Host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          echo "Added ${{ secrets.SERVER_HOST }} to known_hosts"

      # 14. Transfer Build Artifacts to Remote Server
      - name: Transfer Build Artifacts to Remote Server
        run: |
          # 생성된 JAR 파일 경로 찾기 (build/libs/*.jar)
          JAR_FILE=$(ls build/libs/*.jar | head -n 1)
          if [ -z "$JAR_FILE" ]; then
            echo "Error: JAR file not found in build/libs/"
            exit 1
          fi
          echo "Found JAR file: $JAR_FILE"

          # 원격 서버의 배포 경로 설정
          REMOTE_DEPLOY_PATH=${{ secrets.DEPLOY_PATH }}

          # 원격 서버에 배포 디렉토리 생성 (없으면)
          ssh -i ./private-key.pem -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "mkdir -p ${REMOTE_DEPLOY_PATH}"

          # 기존 파일 삭제 (app.jar와 Dockerfile이 존재하는 경우)
          ssh -i ./private-key.pem -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} "rm -f ${REMOTE_DEPLOY_PATH}/app.jar ${REMOTE_DEPLOY_PATH}/Dockerfile"
          echo "Existing app.jar and Dockerfile (if any) removed from ${REMOTE_DEPLOY_PATH}"

          # JAR 파일과 Dockerfile을 원격 서버로 전송 (JAR 파일 이름을 app.jar로 통일)
          scp -i ./private-key.pem -P ${{ secrets.SERVER_PORT }} "$JAR_FILE" ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${REMOTE_DEPLOY_PATH}/app.jar
          scp -i ./private-key.pem -P ${{ secrets.SERVER_PORT }} Dockerfile ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${REMOTE_DEPLOY_PATH}/Dockerfile
          echo "JAR file (as app.jar) and Dockerfile transferred to remote server at ${REMOTE_DEPLOY_PATH}"

      # 15. Build and Deploy on Remote Server
      - name: Build and Deploy on Remote Server
        run: |
          ssh -i ./private-key.pem -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            # 배포 디렉토리로 이동
            cd ${{ secrets.DEPLOY_PATH }}

            # Dockerfile과 JAR 파일을 사용하여 원격 서버에서 Docker 이미지 빌드
            echo "Building Docker image on remote server..."
            docker build -t memoria:latest -f Dockerfile .

            # 기존 컨테이너 중지 및 삭제 (오류 무시)
            echo "Stopping and removing existing container..."
            docker stop memoria || true
            docker rm memoria || true

            # 새로 빌드된 이미지로 Docker 컨테이너 실행
            echo "Running new Docker container..."
            docker run -d --name memoria \
              --network postgres_postgres_net \
              -p 2873:8080 \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              -e GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }} \
              memoria:latest

            echo "Docker container deployed on remote server"
          EOF

      # 16. Cleanup
      - name: Cleanup
        if: always() # 항상 실행되도록 보장
        run: |
          rm -f ./private-key.pem
          echo "Cleaned up SSH key"
