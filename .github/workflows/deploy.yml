name: Build Backend with Remote Frontend and Deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:  # for manual triggers
  repository_dispatch:
    types: [frontend-update]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Backend Repository
      - name: Checkout Backend Repository
        uses: actions/checkout@v4

      # 2. Checkout Frontend Repository
      - name: Checkout Frontend Repository
        uses: actions/checkout@v4
        with:
          repository: Capstone-Memoria/Memoria-Front
          path: frontend
          ref: main

      # 3. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      # 4. Install pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: "8.x"         # pick the version you need
          run_install: false     # we'll run pnpm install explicitly

      # 5. Cache pnpm Store
      - name: Cache pnpm Store
        uses: actions/cache@v4
        id: pnpm-cache
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('frontend/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      # 6. Install & Build Frontend using pnpm
      - name: Build Frontend
        working-directory: ./frontend
        run: |
          pnpm install
          pnpm run build

      # 7. Copy frontend build to Spring Boot static resources
      - name: Copy frontend build to Spring Boot static
        run: |
          echo "Copying frontend build from $(pwd)/frontend/dist to $(pwd)/src/main/resources/static"
          rm -rf ./src/main/resources/static/*
          mkdir -p ./src/main/resources/static
          cp -r ./frontend/dist/* ./src/main/resources/static/

      # 8. Setup Java
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: "17"
          distribution: "temurin"

      # 9. Cache Gradle packages
      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # 10. Make gradlew executable
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # 11. Build Backend with Gradle
      - name: Build Backend with Gradle
        run: ./gradlew bootJar

      # 12. Build Docker Image
      - name: Build Docker Image
        run: |
          docker build -t memoria:latest .

      # 13. Save Docker Image
      - name: Save Docker Image
        run: |
          docker save -o memoria.tar memoria:latest

      # 14. Create SSH Key
      - name: Create SSH Key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private-key.pem
          chmod 600 private-key.pem
          echo "SSH key created and permissions set"

      # 15. Add Known Host
      - name: Add Known Host
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts
          echo "Added ${{ secrets.SERVER_HOST }} to known_hosts"

      # 16. Transfer Docker Image to Remote Server via SCP
      - name: Transfer Docker Image to Remote Server
        run: |
          scp -i ./private-key.pem -P ${{ secrets.SERVER_PORT }} memoria.tar ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:${{ secrets.DEPLOY_PATH }}/memoria.tar
          echo "Docker image transferred to remote server"

      # 17. Deploy to Remote Server
      - name: Deploy to Remote Server
        run: |
          ssh -i ./private-key.pem -p ${{ secrets.SERVER_PORT }} ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
            docker load -i ${{ secrets.DEPLOY_PATH }}/memoria.tar
            docker stop memoria || true
            docker rm memoria || true
            docker run -d --name memoria \
              --network postgres_postgres_net \
              -p 2873:8080 \
              -e DB_HOST=${{ secrets.DB_HOST }} \
              -e DB_NAME=${{ secrets.DB_NAME }} \
              -e DB_USERNAME=${{ secrets.DB_USERNAME }} \
              -e DB_PASSWORD=${{ secrets.DB_PASSWORD }} \
              memoria:latest
            echo "Docker container deployed on remote server"
          EOF

      # 18. Cleanup
      - name: Cleanup
        run: |
          rm -f ./private-key.pem
          echo "Cleaned up SSH key"
